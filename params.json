{"name":"Watcher","tagline":"","body":"####Watcher for Eagle Eye Networks Poll Stream####\r\n\r\nThis is a Node.js client that follows the [Eagle Eye Networks API](https://apidocs.eagleeyenetworks.com/apidocs/).  It listens for new preview images and then sends them to the client through [Socket.io](http://socket.io).  This is a great place to start if you want to strip the auth requirement for the images and make them available to less capable clients (phones, tvs, pictures frames, etc)  It is also a good place to see a simplified version of subscribing to events.\r\n\r\n#####Lifecycle of the app#####\r\nThe following steps need to be performed in order, but any call can be made once user is logged-in.\r\n\r\n - Login (step 1)\r\n - Login (step 2)\r\n - Current user's information is returned by Login (step 2)\r\n - Get device list\r\n - Subscribe to poll stream\r\n - Get subsequent events from poll stream\r\n\r\n#####Installation#####\r\n\r\n - install [Node.js](http://nodejs.org)\r\n - run `npm install\t` \r\n - run `npm start\t`\r\n - go to [http://localhost:3000](http://localhost:3000)\r\n\r\n#####Extras#####\r\nCheckout out the facedetection branch if you want to try something different with the previews.  It will show the image in grayscale if it doesn't detect a face.  Not really useful, but interesting example of using node-opencv\r\n\r\n#####Configure#####\r\n\r\n Edit `config.js` and replace 'your_username' and 'your_password' with your username and password.\r\n\r\n\r\n        module.exports = {\r\n            'username'  :   'your_username',\r\n            'password'  :   'your_password'\r\n        }\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}